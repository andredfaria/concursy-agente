"""
Sistema Concursy - Gerador de Quest√µes e Assistente de Estudos com IA
"""

from crewai import Agent, Task, Crew
import os
from dotenv import load_dotenv
from llm_config import LLMFactory
from agents import EditalAgent, QuestoesExemploAgent, PDFAnalyzerAgent, PedagogoAgent

# Carregar vari√°veis de ambiente
load_dotenv()

class ConcursyApp:
    def __init__(self):
        print("üöÄ Inicializando Sistema Concursy...")
        self.llm = self._setup_llm()
        self._setup_agents()
        
    def _setup_llm(self):
        """Configura o LLM usando a factory"""
        from index import get_llm_from_config
        return get_llm_from_config()
    
    def _setup_agents(self):
        """Inicializa todos os agentes especializados"""
        self.edital_agent = EditalAgent(self.llm)
        self.questoes_agent = QuestoesExemploAgent(self.llm)
        self.pdf_agent = PDFAnalyzerAgent(self.llm)
        self.pedagogo_agent = PedagogoAgent(self.llm)
        
        # Agentes originais do index.py
        self.especialista = None
        self.gerador = None
        self.revisor = None
    
    def menu_principal(self):
        """Menu principal do sistema"""
        while True:
            print("\n" + "="*60)
            print("üéØ SISTEMA CONCURSY - Menu Principal")
            print("="*60)
            print("1. üìù Gerar Nova Quest√£o")
            print("2. üìÑ Analisar PDF (Edital/Prova)")
            print("3. üìö Buscar Quest√µes Exemplo")
            print("4. üéì Explica√ß√£o Pedag√≥gica")
            print("5. üìä Criar Plano de Estudos")
            print("6. üìã Resumir Edital")
            print("7. ‚ùå Sair")
            print("-"*60)
            
            opcao = input("Escolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                self.gerar_questao()
            elif opcao == "2":
                self.analisar_pdf()
            elif opcao == "3":
                self.buscar_questoes_exemplo()
            elif opcao == "4":
                self.explicacao_pedagogica()
            elif opcao == "5":
                self.criar_plano_estudos()
            elif opcao == "6":
                self.resumir_edital()
            elif opcao == "7":
                print("üëã At√© logo!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
    
    def gerar_questao(self):
        """Gera uma nova quest√£o usando os agentes originais"""
        print("\nüìù GERADOR DE QUEST√ïES")
        print("-"*40)
        
        prova = input("Nome da prova/certifica√ß√£o: ").strip()
        tema = input("Tema da quest√£o: ").strip()
        nivel = input("N√≠vel (F√°cil/M√©dio/Dif√≠cil): ").strip()
        area = input("√Årea de conhecimento: ").strip()
        
        # Criar agentes espec√≠ficos
        self.especialista = Agent(
            role="Especialista em Conte√∫do Educacional",
            goal=f"Identificar e estruturar os conceitos fundamentais sobre '{tema}' adequados ao n√≠vel {nivel}",
            backstory=f"""Voc√™ √© um professor experiente com doutorado na √°rea de '{area}'. 
            Tem mais de 20 anos de experi√™ncia em concurso da area de '{area}' e √© especialista em adaptar conte√∫dos 
            complexos para diferentes n√≠veis de aprendizado.""",
            verbose=True,
            llm=self.llm
        )
        
        self.gerador = Agent(
            role="Criador de Quest√µes de M√∫ltipla Escolha",
            goal=f"Criar uma quest√£o de m√∫ltipla escolha clara, objetiva e pedagogicamente adequada baseada no edital do {prova}",
            backstory="""Voc√™ √© um especialista em avalia√ß√£o educacional com forma√ß√£o em Pedagogia. 
            Tem experi√™ncia em criar quest√µes para vestibulares e concursos. 
            Conhece as melhores pr√°ticas para formula√ß√£o de quest√µes de m√∫ltipla escolha.""",
            verbose=True,
            llm=self.llm
        )
        
        # Criar tarefas
        tarefa_especialista = Task(
            description=f"""
            Analise o tema '{tema}' e identifique os 5 pontos principais que devem ser abordados 
            em uma quest√£o de n√≠vel {nivel}. 
            
            Forne√ßa:
            1. Lista dos conceitos fundamentais
            2. Aspectos mais importantes para avalia√ß√£o
            3. Poss√≠veis conex√µes com outros temas
            4. Sugest√µes de enfoque adequado ao n√≠vel
            """,
            agent=self.especialista,
            expected_output="Lista estruturada com os pontos principais e orienta√ß√µes pedag√≥gicas"
        )
        
        tarefa_gerador = Task(
            description="""
            Com base na an√°lise do especialista, crie uma quest√£o de m√∫ltipla escolha seguindo este formato:
            
            QUEST√ÉO: [Enunciado claro e objetivo]
            
            A) [Alternativa 1]
            B) [Alternativa 2] 
            C) [Alternativa 3]
            D) [Alternativa 4]
            
            RESPOSTA CORRETA: [Letra e justificativa]
            """,
            agent=self.gerador,
            expected_output="Quest√£o de m√∫ltipla escolha completa com 4 alternativas e resposta correta identificada"
        )
        
        # Executar
        equipe = Crew(
            agents=[self.especialista, self.gerador],
            tasks=[tarefa_especialista, tarefa_gerador],
            verbose=True,
            process="sequential"
        )
        
        print("\nüîÑ Gerando quest√£o...")
        resultado = equipe.kickoff()
        
        print("\n" + "="*60)
        print("‚úÖ QUEST√ÉO GERADA")
        print("="*60)
        print(resultado)
        
        # Salvar quest√£o se desejado
        salvar = input("\nDeseja salvar esta quest√£o? (s/n): ").lower()
        if salvar == 's':
            questao_dict = {
                "prova": prova,
                "tema": tema,
                "nivel": nivel,
                "area": area,
                "enunciado": "Extrair do resultado",
                "alternativas": {"A": "", "B": "", "C": "", "D": ""},
                "resposta_correta": "",
                "resultado_completo": str(resultado)
            }
            question_id = self.questoes_agent.save_question(questao_dict, prova)
            print(f"‚úÖ Quest√£o salva com ID: {question_id}")
    
    def analisar_pdf(self):
        """Analisa um arquivo PDF"""
        print("\nüìÑ ANALISADOR DE PDF")
        print("-"*40)
        
        pdf_path = input("Caminho do arquivo PDF: ").strip()
        if not os.path.exists(pdf_path):
            print("‚ùå Arquivo n√£o encontrado!")
            return
        
        tipo = input("Tipo de documento (edital/prova/outro): ").lower().strip()
        prova = input("Nome da prova/concurso: ").strip()
        
        # Criar agente e tarefa
        agent = self.pdf_agent.create_agent()
        task_info = self.pdf_agent.create_extraction_task(pdf_path, tipo)
        
        task = Task(
            description=task_info["description"],
            agent=agent,
            expected_output=task_info["expected_output"]
        )
        
        # Executar
        crew = Crew(
            agents=[agent],
            tasks=[task],
            verbose=True
        )
        
        print("\nüîÑ Analisando PDF...")
        resultado = crew.kickoff()
        
        print("\n" + "="*60)
        print("‚úÖ AN√ÅLISE CONCLU√çDA")
        print("="*60)
        print(resultado)
        
        # Salvar resultado
        salvar = input("\nDeseja salvar a an√°lise? (s/n): ").lower()
        if salvar == 's':
            filename = os.path.basename(pdf_path).replace('.pdf', '_analise')
            saved_path = self.pdf_agent.save_extracted_data(
                {"analise": str(resultado), "tipo": tipo},
                prova,
                filename
            )
            print(f"‚úÖ An√°lise salva em: {saved_path}")
    
    def buscar_questoes_exemplo(self):
        """Busca quest√µes exemplo sobre um tema"""
        print("\nüìö BUSCAR QUEST√ïES EXEMPLO")
        print("-"*40)
        
        prova = input("Nome da prova/certifica√ß√£o: ").strip()
        tema = input("Tema das quest√µes: ").strip()
        nivel = input("N√≠vel (F√°cil/M√©dio/Dif√≠cil): ").strip()
        num = int(input("N√∫mero de quest√µes (padr√£o 3): ") or "3")
        
        # Criar agente e tarefa
        agent = self.questoes_agent.create_agent(prova)
        task_info = self.questoes_agent.create_analysis_task(tema, nivel, num)
        
        task = Task(
            description=task_info["description"],
            agent=agent,
            expected_output=task_info["expected_output"]
        )
        
        # Executar
        crew = Crew(
            agents=[agent],
            tasks=[task],
            verbose=True
        )
        
        print("\nüîÑ Buscando quest√µes exemplo...")
        resultado = crew.kickoff()
        
        print("\n" + "="*60)
        print("‚úÖ QUEST√ïES ENCONTRADAS")
        print("="*60)
        print(resultado)
    
    def explicacao_pedagogica(self):
        """Cria explica√ß√£o pedag√≥gica de um conceito"""
        print("\nüéì EXPLICA√á√ÉO PEDAG√ìGICA")
        print("-"*40)
        
        conceito = input("Conceito a ser explicado: ").strip()
        nivel = input("N√≠vel (b√°sico/m√©dio/avan√ßado): ").strip()
        contexto = input("Contexto espec√≠fico (opcional): ").strip() or None
        
        # Criar agente e tarefa
        agent = self.pedagogo_agent.create_agent()
        task_info = self.pedagogo_agent.create_explanation_task(conceito, nivel, contexto)
        
        task = Task(
            description=task_info["description"],
            agent=agent,
            expected_output=task_info["expected_output"]
        )
        
        # Executar
        crew = Crew(
            agents=[agent],
            tasks=[task],
            verbose=True
        )
        
        print("\nüîÑ Criando explica√ß√£o pedag√≥gica...")
        resultado = crew.kickoff()
        
        print("\n" + "="*60)
        print("‚úÖ EXPLICA√á√ÉO PEDAG√ìGICA")
        print("="*60)
        print(resultado)
    
    def criar_plano_estudos(self):
        """Cria plano de estudos personalizado"""
        print("\nüìä CRIAR PLANO DE ESTUDOS")
        print("-"*40)
        
        prova = input("Nome da prova/concurso: ").strip()
        tempo = input("Tempo dispon√≠vel at√© a prova: ").strip()
        
        print("Informe seus pontos fracos (digite 'fim' quando terminar):")
        pontos_fracos = []
        while True:
            ponto = input("- ").strip()
            if ponto.lower() == 'fim':
                break
            if ponto:
                pontos_fracos.append(ponto)
        
        if not pontos_fracos:
            print("‚ùå Informe pelo menos um ponto fraco!")
            return
        
        # Criar agente e tarefa
        agent = self.pedagogo_agent.create_agent("concurso")
        task_info = self.pedagogo_agent.create_study_plan_task(prova, tempo, pontos_fracos)
        
        task = Task(
            description=task_info["description"],
            agent=agent,
            expected_output=task_info["expected_output"]
        )
        
        # Executar
        crew = Crew(
            agents=[agent],
            tasks=[task],
            verbose=True
        )
        
        print("\nüîÑ Criando plano de estudos personalizado...")
        resultado = crew.kickoff()
        
        print("\n" + "="*60)
        print("‚úÖ PLANO DE ESTUDOS")
        print("="*60)
        print(resultado)
    
    def resumir_edital(self):
        """Resume um edital"""
        print("\nüìã RESUMIR EDITAL")
        print("-"*40)
        
        prova = input("Nome da prova/concurso: ").strip()
        
        print("Como deseja fornecer o edital?")
        print("1. Caminho do arquivo PDF")
        print("2. Colar texto do edital")
        opcao = input("Op√ß√£o: ").strip()
        
        if opcao == "1":
            pdf_path = input("Caminho do PDF: ").strip()
            if not os.path.exists(pdf_path):
                print("‚ùå Arquivo n√£o encontrado!")
                return
            edital_content = self.pdf_agent.extract_text_from_pdf(pdf_path)
        else:
            print("Cole o texto do edital (digite '###FIM###' em uma nova linha quando terminar):")
            lines = []
            while True:
                line = input()
                if line.strip() == "###FIM###":
                    break
                lines.append(line)
            edital_content = "\n".join(lines)
        
        # Criar agente e tarefa
        agent = self.edital_agent.create_agent(prova)
        task_info = self.edital_agent.create_summary_task(edital_content)
        
        task = Task(
            description=task_info["description"],
            agent=agent,
            expected_output=task_info["expected_output"]
        )
        
        # Executar
        crew = Crew(
            agents=[agent],
            tasks=[task],
            verbose=True
        )
        
        print("\nüîÑ Resumindo edital...")
        resultado = crew.kickoff()
        
        print("\n" + "="*60)
        print("‚úÖ RESUMO DO EDITAL")
        print("="*60)
        print(resultado)
        
        # Salvar resumo
        salvar = input("\nDeseja salvar o resumo? (s/n): ").lower()
        if salvar == 's':
            base_path = f"data/provas/{prova.lower().replace(' ', '-')}/resumos"
            os.makedirs(base_path, exist_ok=True)
            
            filename = f"resumo_edital_{prova.lower().replace(' ', '_')}.md"
            file_path = os.path.join(base_path, filename)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(f"# Resumo do Edital - {prova}\n\n")
                f.write(str(resultado))
            
            print(f"‚úÖ Resumo salvo em: {file_path}")

if __name__ == "__main__":
    try:
        app = ConcursyApp()
        app.menu_principal()
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("üí° Verifique as configura√ß√µes e tente novamente.") 