from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI
import os
from dotenv import load_dotenv

# Carregar vari√°veis do arquivo .env
load_dotenv()

# Verificar se a chave da OpenAI est√° configurada
if not os.getenv("OPENAI_API_KEY"):
    raise ValueError("‚ùå OPENAI_API_KEY n√£o encontrada! Crie um arquivo .env com sua chave da OpenAI")

# Configurar o modelo LLM
llm = ChatOpenAI(
    model="gpt-4o-mini",  # Modelo mais econ√¥mico e eficiente
    temperature=0.7,      # Criatividade moderada
    openai_api_key=os.getenv("OPENAI_API_KEY")
)

# Configura√ß√µes da quest√£o
prova = "CPA-2O"
tema = "Mercado Financeiro"
nivel = "Dificil"
area = "Finan√ßas"

# Especialista em Conte√∫do
especialista = Agent(
    role="Especialista em Conte√∫do Educacional",
    goal=f"Identificar e estruturar os conceitos fundamentais sobre '{tema}' adequados ao n√≠vel {nivel}",
    backstory=f"""Voc√™ √© um professor experiente com doutorado na √°rea de '{area}'. 
    Tem mais de 20 anos de experi√™ncia em concurso da area de '{area}' e √© especialista em adaptar conte√∫dos 
    complexos para diferentes n√≠veis de aprendizado.""",
    verbose=True,
    llm=llm
)

# Gerador de Quest√µes
gerador = Agent(
    role="Criador de Quest√µes de M√∫ltipla Escolha",
    goal="Criar uma quest√£o de m√∫ltipla escolha clara, objetiva e pedagogicamente adequada baseada no edital do {prova}",
    backstory="""Voc√™ √© um especialista em avalia√ß√£o educacional com forma√ß√£o em Pedagogia. 
    Tem experi√™ncia em criar quest√µes para vestibulares e concursos. 
    Conhece as melhores pr√°ticas para formula√ß√£o de quest√µes de m√∫ltipla escolha.""",
    verbose=True,
    llm=llm
)

# Revisor Pedag√≥gico
revisor = Agent(
    role="Revisor Pedag√≥gico",
    goal="Garantir a qualidade, clareza e adequa√ß√£o pedag√≥gica da quest√£o finalizada baseada no edital do {prova}",
    backstory="""Voc√™ √© um pedagogo com especializa√ß√£o em avalia√ß√£o educacional. 
    Tem experi√™ncia em revisar materiais editais de concursos. 
    Seu trabalho √© garantir que a quest√£o esteja perfeita antes da aplica√ß√£o.""",
    verbose=True,
    llm=llm
)

# Tarefas Estruturadas
tarefa_especialista = Task(
    description=f"""
    Analise o tema '{tema}' e identifique os 5 pontos principais que devem ser abordados 
    em uma quest√£o de n√≠vel {nivel}. 
    
    Forne√ßa:
    1. Lista dos conceitos fundamentais
    2. Aspectos mais importantes para avalia√ß√£o
    3. Poss√≠veis conex√µes com outros temas
    4. Sugest√µes de enfoque adequado ao n√≠vel
    
    Seja espec√≠fico e educacionalmente relevante.
    """,
    agent=especialista,
    expected_output="Lista estruturada com os pontos principais e orienta√ß√µes pedag√≥gicas"
)

tarefa_gerador = Task(
    description="""
    Com base na an√°lise do especialista, crie uma quest√£o de m√∫ltipla escolha seguindo este formato:
    
    QUEST√ÉO: [Enunciado claro e objetivo]
    
    A) [Alternativa 1]
    B) [Alternativa 2] 
    C) [Alternativa 3]
    D) [Alternativa 4]
    
    RESPOSTA CORRETA: [Letra e justificativa]
    
    Requisitos:
    - Quest√£o clara e sem ambiguidades
    - 4 alternativas plaus√≠veis
    - Apenas uma resposta correta
    - Distratores bem elaborados
    - Linguagem adequada ao n√≠vel
    """,
    agent=gerador,
    expected_output="Quest√£o de m√∫ltipla escolha completa com 4 alternativas e resposta correta identificada"
)

# Equipe de Cria√ß√£o de Quest√µes
equipe = Crew(
    agents=[especialista, gerador],
    tasks=[tarefa_especialista, tarefa_gerador],
    verbose=True,
    process="sequential"  # Processamento sequencial para depend√™ncias
)

# Execu√ß√£o
if __name__ == "__main__":
    print("üéØ Iniciando gera√ß√£o de quest√£o...")
    print(f"üìö Tema: {tema}")
    print(f"üìö Prova: {prova}")
    print(f"üìö Area: {area}")
    print(f"üìä N√≠vel: {nivel}")
    print("-" * 50)
    
    try:
        resultado = equipe.kickoff()
        print("\n" + "="*60)
        print("‚úÖ QUEST√ÉO FINALIZADA")
        print("="*60)
        print(resultado)
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {e}")
        print("Verifique se a chave da OpenAI est√° correta e se h√° cr√©ditos dispon√≠veis.")
